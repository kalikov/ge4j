package org.ge4j.core;

import org.ge4j.Engine;
import org.ge4j.EngineComponent;
import org.ge4j.Event;
import org.ge4j.ExecutableEvent;
import org.ge4j.MainFunction;
import org.ge4j.Managed;
import org.ge4j.MillisProvider;
import org.ge4j.MultiDelegate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

class EngineImpl implements Engine, EngineComponent {
    private static final Logger logger = LoggerFactory.getLogger(EngineImpl.class);

    private final ExecutableEvent<Runnable> engineStarted = new MultiDelegate<>();
    private final ExecutableEvent<Runnable> engineStopped = new MultiDelegate<>();

    private final MillisProvider millisProvider;
    private final FrameCounter frameCounter;
    private final MainFunction mainFunction;

    private boolean quit;
    private boolean isActive;
    private boolean dontSuspend;

    private long fixedDelta;
    private long frameTime;
    private long elapsedTime;

    @Managed
    public EngineImpl(MillisProvider millisProvider, MainFunction mainFunction) {
        this.millisProvider = millisProvider;
        this.mainFunction = mainFunction;
        this.frameCounter = new FrameCounter(millisProvider);
    }

    @Override
    public Event<Runnable> engineStarted() {
        return engineStarted;
    }

    @Override
    public Event<Runnable> engineStopped() {
        return engineStopped;
    }

    public void run() {
        logger.info("Engine started");

        DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy; HH:mm:ss");
        logger.info("Date: {}", dateFormat.format(new Date()));

        logger.info("Java: {}; OS: {}", System.getProperty("java.version"), System.getProperty("os.name"));

        long freeMemory = Runtime.getRuntime().freeMemory();
        long totalMemory = Runtime.getRuntime().totalMemory();
        logger.info("Memory: {}K total, {}K free", totalMemory / 1024L, freeMemory / 1024L);

        isActive = true;
        engineStarted.execute(Runnable::run);
        try {
            mainLoop();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } finally {
            isActive = false;
            engineStopped.execute(Runnable::run);
        }

        logger.info("Engine stopped");
    }

    @Override
    public void stop() {
        quit = true;
    }

    private void mainLoop() throws InterruptedException {
        frameCounter.reset();
        frameTime = millisProvider.getMillis();

        while (!quit) {
//            Event event;
//            while ((event = input.pollEvent()) != null) {
//                event.process(this);
//            }

            // Check if mouse is over HGE window for Input_IsMouseOver
//            _UpdateMouse();

            if (isActive || dontSuspend) {
                cycle();
            } else {
                // If main loop is suspended - just sleep a bit
                // (though not too much to allow instant window redraw if requested by OS)
                Thread.sleep(1);
            }
        }
    }

    private void cycle() throws InterruptedException {
        long time;
        long delta;
        // Ensure we have at least 1ms time step to not confuse user's code with 0
        do {
            time = millisProvider.getMillis();
            delta = time - frameTime;
        } while (delta < 1);

        // If we reached the time for the next frame or we just run in unlimited FPS mode, then do the stuff
        if (delta < fixedDelta) {
            // If we have a fixed interval and the time for the next frame isn't too close, sleep a bit
            if (delta + 3 < fixedDelta) {
                Thread.sleep(1);
            }
        } else {
            // fDeltaTime = time step in seconds returned by Timer_GetDelta
            long normalizedDelta = delta;
            // Cap too large time steps usually caused by lost focus to avoid jerks
            if (normalizedDelta > 200) {
                normalizedDelta = fixedDelta > 0 ? fixedDelta : 10;
            }

            frameTime = time;
            elapsedTime += normalizedDelta;

            frameCounter.increment();
            //_UpdatePowerStatus();

            mainFunction.run(normalizedDelta);
            logger.trace("FPS: {}", frameCounter.getFrameRate());
            // Clean up input events that were generated by WindowProc and weren't handled by user's code
//                    _ClearQueue();
        }
    }
}
